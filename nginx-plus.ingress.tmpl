{{range $server := .Servers}}
{{if index $.Ingress.Annotations "custom.nginx.org/custom-log-format"}}
{{with $logformat := index $.Ingress.Annotations "custom.nginx.org/custom-log-format"}}
log_format {{$server.Name}} {{$logformat}};
{{end}}
{{end}}
{{end}}

# handling custom.nginx.org/conn-limiting and custom.nginx.org/conn-limiting-num 
{{if index $.Ingress.Annotations "custom.nginx.org/conn-limiting"}}
limit_conn_zone $binary_remote_addr zone={{$.Ingress.Namespace}}-{{$.Ingress.Name}}-conn:10m;
{{end}}

# handling custom.nginx.org/rate-limiting and custom.nginx.org/rate-limiting-rate 
{{if index $.Ingress.Annotations "custom.nginx.org/rate-limiting"}}
{{$rate := index $.Ingress.Annotations "custom.nginx.org/rate-limiting-rate"}}
limit_req_zone $binary_remote_addr zone={{$.Ingress.Namespace}}-{{$.Ingress.Name}}-req:10m rate={{if $rate}}{{$rate}}{{end}};
{{end}}

# handling canary-by-weight
{{if index $.Ingress.Annotations "custom.nginx.org/canary-by-weight"}}
split_clients "${remote_addr}${remote_port}AAA" $match {
{{range $splitclient := split (index $.Ingress.Annotations "custom.nginx.org/canary-by-weight") ","}} 
    {{trim $splitclient}}; 
{{end}}
}
{{end}}

# handling canary add header svc
{{if index $.Ingress.Annotations "custom.nginx.org/canary-add-header-svc"}}
{{with $value := index $.Ingress.Annotations "custom.nginx.org/canary-add-header-svc"}}
map $service $addsvcheader{
    {{range $svc_value := split (index $.Ingress.Annotations "custom.nginx.org/canary-add-header-svc") ","}}
    {{trim $svc_value}};
    {{end}}
}
{{end}}
{{end}}

{{if index $.Ingress.Annotations "custom.nginx.org/degrade-svc"}}
{{with $value := index $.Ingress.Annotations "custom.nginx.org/degrade-svc"}}
map $path $degradesvc{
	{{range $degrade_svc := split (index $.Ingress.Annotations "custom.nginx.org/degrade-svc") ","}}
    {{trim $degrade_svc}};
    {{end}}
}
{{end}}
{{end}}

{{if index $.Ingress.Annotations "custom.nginx.org/canary-by-cookie"}}
{{with $canarycookie := index $.Ingress.Annotations "custom.nginx.org/canary-by-cookie"}}
map $cookie_{{$canarycookie}} $match_cookie {
    {{if index $.Ingress.Annotations "custom.nginx.org/canary-by-cookie-value"}}
    {{range $cookievalue := split (index $.Ingress.Annotations "custom.nginx.org/canary-by-cookie-value") ","}} 
    {{trim $cookievalue}}; 
    {{end}}
    {{end}}
}
{{end}}
{{end}}

{{if index $.Ingress.Annotations "custom.nginx.org/canary-by-header"}}
{{with $canaryheader := index $.Ingress.Annotations "custom.nginx.org/canary-by-header"}}
map $http_{{$canaryheader}} $match_header {
    {{if index $.Ingress.Annotations "custom.nginx.org/canary-by-header-value"}}
    {{range $headervalue := split (index $.Ingress.Annotations "custom.nginx.org/canary-by-header-value") ","}} 
    {{trim $headervalue}}; 
    {{end}}
    {{end}}
}
{{end}}
{{end}}

{{if index $.Ingress.Annotations "custom.nginx.org/canary-by-argument"}}
{{with $canaryargument := index $.Ingress.Annotations "custom.nginx.org/canary-by-argument"}}
map $arg_{{$canaryargument}} $match_argument {
    {{if index $.Ingress.Annotations "custom.nginx.org/canary-by-argument-value"}}
    {{range $argumentvalue := split (index $.Ingress.Annotations "custom.nginx.org/canary-by-argument-value") ","}} 
    {{trim $argumentvalue}}; 
    {{end}}
    {{end}}
}
{{end}}
{{end}}

{{if index $.Ingress.Annotations "custom.nginx.org/canary-by-variable"}}
{{with $canaryvariable := index $.Ingress.Annotations "custom.nginx.org/canary-by-variable"}}
map {{$canaryvariable}} $match_variable {
    {{if index $.Ingress.Annotations "custom.nginx.org/canary-by-variable-value"}}
    {{range $variablevalue := split (index $.Ingress.Annotations "custom.nginx.org/canary-by-variable-value") ","}} 
    {{trim $variablevalue}}; 
    {{end}}
    {{end}}
}
{{end}}
{{end}}

{{if index $.Ingress.Annotations "custom.nginx.org/canary-by-ipset"}}
geo $binary_remote_addr $match_ipset {
    {{range $ipsetvalue := split (index $.Ingress.Annotations "custom.nginx.org/canary-by-ipset") ","}} 
    {{trim $ipsetvalue}}; 
    {{end}}
}
{{end}}

# single condition
# single condition for each : cookie , header, argument, variable, ip set
{{if index $.Ingress.Annotations "custom.nginx.org/canary-single"}}

# single condition: cookie
{{if index $.Ingress.Annotations "custom.nginx.org/canary-by-cookie"}}
map $match_cookie $match_multicondition {
    {{range $multiconditionvalue := split (index $.Ingress.Annotations "custom.nginx.org/canary-by-multicondition") ","}} 
    {{trim $multiconditionvalue}}; 
    {{end}}
}
{{end}}


# single condition: header
{{if index $.Ingress.Annotations "custom.nginx.org/canary-by-header"}}
map $match_header $match_multicondition {
    {{range $multiconditionvalue := split (index $.Ingress.Annotations "custom.nginx.org/canary-by-multicondition") ","}} 
    {{trim $multiconditionvalue}}; 
    {{end}}
}
{{end}}

# single condition: argument
{{if index $.Ingress.Annotations "custom.nginx.org/canary-by-argument"}}
map $match_argument $match_multicondition {
    {{range $multiconditionvalue := split (index $.Ingress.Annotations "custom.nginx.org/canary-by-multicondition") ","}} 
    {{trim $multiconditionvalue}}; 
    {{end}}
}
{{end}}

# single condition: variable
{{if index $.Ingress.Annotations "custom.nginx.org/canary-by-variable"}}
map $match_variable $match_multicondition {
    {{range $multiconditionvalue := split (index $.Ingress.Annotations "custom.nginx.org/canary-by-multicondition") ","}} 
    {{trim $multiconditionvalue}}; 
    {{end}}
}
{{end}}

# single condition: ipset
{{if index $.Ingress.Annotations "custom.nginx.org/canary-by-ipset"}}
map $match_ipset $match_multicondition {
    {{range $multiconditionvalue := split (index $.Ingress.Annotations "custom.nginx.org/canary-by-multicondition") ","}} 
    {{trim $multiconditionvalue}}; 
    {{end}}
}
{{end}}

{{end}}

# multi condition 
{{if index $.Ingress.Annotations "custom.nginx.org/canary-multi"}}

{{if index $.Ingress.Annotations "custom.nginx.org/canary-by-header"}}
{{if index $.Ingress.Annotations "custom.nginx.org/canary-by-cookie"}}
map $match_header$match_cookie $match_multicondition {
    {{range $multiconditionvalue := split (index $.Ingress.Annotations "custom.nginx.org/canary-by-multicondition") ","}} 
    {{trim $multiconditionvalue}}; 
    {{end}}
}
{{end}}
{{end}}

{{end}}

# configuration for {{.Ingress.Namespace}}/{{.Ingress.Name}}
{{range $upstream := .Upstreams}}
upstream {{$upstream.Name}} {
	zone {{$upstream.Name}} {{if ne $upstream.UpstreamZoneSize "0"}}{{$upstream.UpstreamZoneSize}}{{else}}512k{{end}};
	{{if $upstream.LBMethod }}{{$upstream.LBMethod}};{{end}}
	{{range $server := $upstream.UpstreamServers}}
	server {{$server.Address}}:{{$server.Port}} max_fails={{$server.MaxFails}} fail_timeout={{$server.FailTimeout}} max_conns={{$server.MaxConns}}
	    {{- if $server.SlowStart}} slow_start={{$server.SlowStart}}{{end}}{{if $server.Resolve}} resolve{{end}};{{end}}
	{{if $upstream.StickyCookie}}
	sticky cookie {{$upstream.StickyCookie}};
	{{end}}
	{{if $.Keepalive}}keepalive {{$.Keepalive}};{{end}}
	{{- if $upstream.UpstreamServers -}}
	{{- if $upstream.Queue}}
	queue {{$upstream.Queue}} timeout={{$upstream.QueueTimeout}}s;
	{{- end -}}
	{{- end}}
}
{{- end}}

{{range $server := .Servers}}
server {
	{{if $server.SpiffeCerts}}
	listen 443 ssl;
	ssl_certificate /etc/nginx/secrets/spiffe_cert.pem;
	ssl_certificate_key /etc/nginx/secrets/spiffe_key.pem;
	{{else}}
	{{if not $server.GRPCOnly}}
	{{range $port := $server.Ports}}
	listen {{$port}}{{if $server.ProxyProtocol}} proxy_protocol{{end}};
	{{- end}}
	{{end}}
	
	{{if index $.Ingress.Annotations "custom.nginx.org/custom-access-log-off"}}
	{{with $accesslog := index $.Ingress.Annotations "custom.nginx.org/custom-access-log-off"}}
	access_log off;
	{{end}}
	{{else}}
	{{if index $.Ingress.Annotations "custom.nginx.org/custom-log-format"}}
	access_log /var/log/nginx/{{$server.Name}}-access.log {{$server.Name}};
	{{end}}
	{{end}}
	
	{{if index $.Ingress.Annotations "custom.nginx.org/custom-error-log"}}
	{{with $errorflag := index $.Ingress.Annotations "custom.nginx.org/custom-error-log"}}
	error_log /var/log/nginx/{{$server.Name}}-error.log {{$errorflag}};
	{{end}}
	{{end}}

	{{if $server.SSL}}
	{{if $server.TLSPassthrough}}
	listen unix:/var/lib/nginx/passthrough-https.sock ssl{{if $server.HTTP2}} http2{{end}} proxy_protocol;
	set_real_ip_from unix:;
	real_ip_header proxy_protocol;
	{{else}}
	{{- range $port := $server.SSLPorts}}
	listen {{$port}} ssl{{if $server.HTTP2}} http2{{end}}{{if $server.ProxyProtocol}} proxy_protocol{{end}};
	{{- end}}
	{{end}}
	{{if $server.SSLRejectHandshake}}
	ssl_reject_handshake on;
	{{else}}
	ssl_certificate {{$server.SSLCertificate}};
	ssl_certificate_key {{$server.SSLCertificateKey}};
	{{end}}
	{{end}}
	{{end}}

	{{range $setRealIPFrom := $server.SetRealIPFrom}}
	set_real_ip_from {{$setRealIPFrom}};{{end}}
	{{if $server.RealIPHeader}}real_ip_header {{$server.RealIPHeader}};{{end}}
	{{if $server.RealIPRecursive}}real_ip_recursive on;{{end}}

	server_tokens "{{$server.ServerTokens}}";

	server_name {{$server.Name}};

	status_zone {{$server.StatusZone}};
	set $resource_type "ingress";
	set $resource_name "{{$.Ingress.Name}}";
	set $resource_namespace "{{$.Ingress.Namespace}}";

	{{- if $server.AppProtectEnable}}
	app_protect_enable {{$server.AppProtectEnable}};
	{{if $server.AppProtectPolicy}}app_protect_policy_file {{$server.AppProtectPolicy}};{{end}}
	{{- end}}
	{{- if $server.AppProtectLogEnable}}
	app_protect_security_log_enable {{$server.AppProtectLogEnable}};
	{{range $AppProtectLogConf := $server.AppProtectLogConfs}}app_protect_security_log {{$AppProtectLogConf}};
	{{end}}
	{{- end}}
	
	{{if not $server.GRPCOnly}}
	{{range $proxyHideHeader := $server.ProxyHideHeaders}}
	proxy_hide_header {{$proxyHideHeader}};{{end}}
	{{range $proxyPassHeader := $server.ProxyPassHeaders}}
	proxy_pass_header {{$proxyPassHeader}};{{end}}
	{{end}}

	{{- if and $server.HSTS (or $server.SSL $server.HSTSBehindProxy)}}
	set $hsts_header_val "";
	proxy_hide_header Strict-Transport-Security;
	{{- if $server.HSTSBehindProxy}}
	if ($http_x_forwarded_proto = 'https') {
	{{else}}
	if ($https = on) {
	{{- end}}
		set $hsts_header_val "max-age={{$server.HSTSMaxAge}}; {{if $server.HSTSIncludeSubdomains}}includeSubDomains; {{end}}preload";
	}

	add_header Strict-Transport-Security "$hsts_header_val" always;
	{{end}}

	{{if $server.SSL}}
	{{if not $server.GRPCOnly}}
	{{- if $server.SSLRedirect}}
	if ($scheme = http) {
		return 301 https://$host:{{index $server.SSLPorts 0}}$request_uri;
	}
	{{- end}}
	{{end}}
	{{- end}}

	{{- if $server.RedirectToHTTPS}}
	if ($http_x_forwarded_proto = 'http') {
		return 301 https://$host$request_uri;
	}
	{{- end}}

	{{with $jwt := $server.JWTAuth}}
	auth_jwt_key_file {{$jwt.Key}};
	auth_jwt "{{.Realm}}"{{if $jwt.Token}} token={{$jwt.Token}}{{end}};

	{{- if $jwt.RedirectLocationName}}
	error_page 401 {{$jwt.RedirectLocationName}};
	{{end}}
	{{end}}

	{{- if $server.ServerSnippets}}
	{{range $value := $server.ServerSnippets}}
	{{$value}}{{end}}
	{{- end}}

	{{- range $healthCheck := $server.HealthChecks}}
	location @hc-{{$healthCheck.UpstreamName}} {
		{{- range $name, $header := $healthCheck.Headers}}
		proxy_set_header {{$name}} "{{$header}}";
		{{- end }}
		proxy_connect_timeout {{$healthCheck.TimeoutSeconds}}s;
		proxy_read_timeout {{$healthCheck.TimeoutSeconds}}s;
		proxy_send_timeout {{$healthCheck.TimeoutSeconds}}s;
		proxy_pass {{$healthCheck.Scheme}}://{{$healthCheck.UpstreamName}};
		health_check {{if $healthCheck.Mandatory}}mandatory {{end}}uri={{$healthCheck.URI}} interval=
			{{- $healthCheck.Interval}}s fails={{$healthCheck.Fails}} passes={{$healthCheck.Passes}};
	}
	{{end -}}

	{{- range $location := $server.JWTRedirectLocations}}
	location {{$location.Name}} {
		internal;
		return 302 {{$location.LoginURL}};
	}
	{{end -}}

	{{range $location := $server.Locations}}
	location {{$location.Path}} {
		set $service "{{$location.ServiceName}}";
		set $path "{{$location.Path}}";
		status_zone {{$location.Path}}_{{$location.ServiceName}};
		{{with $location.MinionIngress}}
		# location for minion {{$location.MinionIngress.Namespace}}/{{$location.MinionIngress.Name}}
		set $resource_name "{{$location.MinionIngress.Name}}";
		set $resource_namespace "{{$location.MinionIngress.Namespace}}";
		{{end}}
		
            # handling custom.nginx.org/rewrite-with-host  
            {{if index $.Ingress.Annotations "custom.nginx.org/rewrite-with-host"}}
            {{with $rewritehost := index $.Ingress.Annotations "custom.nginx.org/rewrite-with-host"}}
            rewrite ^{{$location.Path}}/?(.*) {{$rewritehost}} break;
            {{end}} 
            {{end}} 
	    
	    # handling custom.nginx.org/custom.nginx.org/set-header
	    {{if index $.Ingress.Annotations "custom.nginx.org/set-header"}}
            {{range $setheader := split (index $.Ingress.Annotations "custom.nginx.org/set-header") ","}} 
            proxy_set_header {{trim $setheader}}; 
            {{end}}
	    {{end}} 

            # handling custom.nginx.org/custom.nginx.org/add-header
	    {{if index $.Ingress.Annotations "custom.nginx.org/add-header"}}
            {{range $addheader := split (index $.Ingress.Annotations "custom.nginx.org/add-header") ","}} 
            add_header {{trim $addheader}} always; 
            {{end}}
	    {{end}} 
	    
	    # handling custom.nginx.org/canary-add-header
	    {{if index $.Ingress.Annotations "custom.nginx.org/canary-add-header-svc"}}
            if ( $addsvcheader = "1" ){
	    {{if index $.Ingress.Annotations "custom.nginx.org/canary-add-header"}}
               {{range $addcanaryheader := split (index $.Ingress.Annotations "custom.nginx.org/canary-add-header") ","}} 
                add_header {{trim $addcanaryheader}} always; 
               {{end}}
	    {{end}} 
            }
            {{end}}
	    
	    # handling custom.nginx.org/conn-limiting-num
            {{if index $.Ingress.Annotations "custom.nginx.org/conn-limiting"}}
            {{with $conn := index $.Ingress.Annotations "custom.nginx.org/conn-limiting-num"}}
            limit_conn {{$.Ingress.Namespace}}-{{$.Ingress.Name}}-conn {{$conn}};
            limit_conn_log_level error;
            limit_conn_status 503;
            {{end}} 
            {{end}}
	    
	    # handling custom.nginx.org/rate-limiting and custom.nginx.org/rate-limiting-burst
            {{if index $.Ingress.Annotations "custom.nginx.org/rate-limiting"}}
            {{with $burst := index $.Ingress.Annotations "custom.nginx.org/rate-limiting-burst"}}
            limit_req zone={{$.Ingress.Namespace}}-{{$.Ingress.Name}}-req {{if $burst}}burst={{$burst}}{{else}}nodelay{{end}};
            limit_req_log_level error;
            limit_req_status 503;
            {{end}} 
            {{end}}
	    
	    {{if index $.Ingress.Annotations "custom.nginx.org/degrade-svc"}}
	    error_page 503 @{{$location.ServiceName}};
	    {{end}} 

		{{if $location.GRPC}}
		{{if not $server.GRPCOnly}}
		error_page 400 @grpcerror400;
		error_page 401 @grpcerror401;
		error_page 403 @grpcerror403;
		error_page 404 @grpcerror404;
		error_page 405 @grpcerror405;
		error_page 408 @grpcerror408;
		error_page 414 @grpcerror414;
		error_page 426 @grpcerror426;
		error_page 500 @grpcerror500;
		error_page 501 @grpcerror501;
		error_page 502 @grpcerror502;
		error_page 503 @grpcerror503;
		error_page 504 @grpcerror504;
		{{end}}

		{{- if $location.LocationSnippets}}
		{{range $value := $location.LocationSnippets}}
		{{$value}}{{end}}
		{{- end}}

		{{with $jwt := $location.JWTAuth}}
		auth_jwt_key_file {{$jwt.Key}};
		auth_jwt "{{.Realm}}"{{if $jwt.Token}} token={{$jwt.Token}}{{end}};
		{{end}}

		grpc_connect_timeout {{$location.ProxyConnectTimeout}};
		grpc_read_timeout {{$location.ProxyReadTimeout}};
		grpc_send_timeout {{$location.ProxySendTimeout}};
		grpc_set_header Host $host;
		grpc_set_header X-Real-IP $remote_addr;
		grpc_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		grpc_set_header X-Forwarded-Host $host;
		grpc_set_header X-Forwarded-Port $server_port;
		grpc_set_header X-Forwarded-Proto $scheme;

		{{- if $location.ProxyBufferSize}}
		grpc_buffer_size {{$location.ProxyBufferSize}};
		{{- end}}
		{{if $.SpiffeClientCerts}}
		grpc_ssl_certificate /etc/nginx/secrets/spiffe_cert.pem;
		grpc_ssl_certificate_key /etc/nginx/secrets/spiffe_key.pem;
		grpc_ssl_trusted_certificate /etc/nginx/secrets/spiffe_rootca.pem;
		grpc_ssl_server_name on;
		grpc_ssl_verify on;
		grpc_ssl_verify_depth 25;
		grpc_ssl_name {{$location.ProxySSLName}};
		{{end}}
		{{if $location.SSL}}
		grpc_pass grpcs://{{$location.Upstream.Name}};
		{{else}}
		grpc_pass grpc://{{$location.Upstream.Name}};
		{{end}}
		{{else}}
		proxy_http_version 1.1;
		{{if $location.Websocket}}
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection $connection_upgrade;
		{{- else}}
		{{- if $.Keepalive}}proxy_set_header Connection "";{{end}}
		{{- end}}

		{{- if $location.LocationSnippets}}
		{{range $value := $location.LocationSnippets}}
		{{$value}}{{end}}
		{{- end}}

		{{ with $jwt := $location.JWTAuth }}
		auth_jwt_key_file {{$jwt.Key}};
		auth_jwt "{{.Realm}}"{{if $jwt.Token}} token={{$jwt.Token}}{{end}};
		{{if $jwt.RedirectLocationName}}
		error_page 401 {{$jwt.RedirectLocationName}};
		{{end}}
		{{end}}

		proxy_connect_timeout {{$location.ProxyConnectTimeout}};
		proxy_read_timeout {{$location.ProxyReadTimeout}};
		proxy_send_timeout {{$location.ProxySendTimeout}};
		client_max_body_size {{$location.ClientMaxBodySize}};
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Host $host;
		proxy_set_header X-Forwarded-Port $server_port;
		proxy_set_header X-Forwarded-Proto {{if $server.RedirectToHTTPS}}https{{else}}$scheme{{end}};
		proxy_buffering {{if $location.ProxyBuffering}}on{{else}}off{{end}};
		{{- if $location.ProxyBuffers}}
		proxy_buffers {{$location.ProxyBuffers}};
		{{- end}}
		{{- if $location.ProxyBufferSize}}
		proxy_buffer_size {{$location.ProxyBufferSize}};
		{{- end}}
		{{- if $location.ProxyMaxTempFileSize}}
		proxy_max_temp_file_size {{$location.ProxyMaxTempFileSize}};
		{{- end}}
		{{if $.SpiffeClientCerts}}
		proxy_ssl_certificate /etc/nginx/secrets/spiffe_cert.pem;
		proxy_ssl_certificate_key /etc/nginx/secrets/spiffe_key.pem;
		proxy_ssl_trusted_certificate /etc/nginx/secrets/spiffe_rootca.pem;
		proxy_ssl_server_name on;
		proxy_ssl_verify on;
		proxy_ssl_verify_depth 25;
		proxy_ssl_name {{$location.ProxySSLName}};
		{{end}}
		{{if $location.SSL}}
		proxy_pass https://{{$location.Upstream.Name}}{{$location.Rewrite}};
		{{else}}
		proxy_pass http://{{$location.Upstream.Name}}{{$location.Rewrite}};
		{{end}}
		{{end}}
	}{{end}}
	{{if $server.GRPCOnly}}
	error_page 400 @grpcerror400;
	error_page 401 @grpcerror401;
	error_page 403 @grpcerror403;
	error_page 404 @grpcerror404;
	error_page 405 @grpcerror405;
	error_page 408 @grpcerror408;
	error_page 414 @grpcerror414;
	error_page 426 @grpcerror426;
	error_page 500 @grpcerror500;
	error_page 501 @grpcerror501;
	error_page 502 @grpcerror502;
	error_page 503 @grpcerror503;
	error_page 504 @grpcerror504;
	{{end}}
	{{if $server.HTTP2}}
	location @grpcerror400 { default_type application/grpc; return 400 "\n"; }
	location @grpcerror401 { default_type application/grpc; return 401 "\n"; }
	location @grpcerror403 { default_type application/grpc; return 403 "\n"; }
	location @grpcerror404 { default_type application/grpc; return 404 "\n"; }
	location @grpcerror405 { default_type application/grpc; return 405 "\n"; }
	location @grpcerror408 { default_type application/grpc; return 408 "\n"; }
	location @grpcerror414 { default_type application/grpc; return 414 "\n"; }
	location @grpcerror426 { default_type application/grpc; return 426 "\n"; }
	location @grpcerror500 { default_type application/grpc; return 500 "\n"; }
	location @grpcerror501 { default_type application/grpc; return 501 "\n"; }
	location @grpcerror502 { default_type application/grpc; return 502 "\n"; }
	location @grpcerror503 { default_type application/grpc; return 503 "\n"; }
	location @grpcerror504 { default_type application/grpc; return 504 "\n"; }
	{{end}}
	
        ## degrade service 
	{{if index $.Ingress.Annotations "custom.nginx.org/degrade-svc"}}
        {{range $location := $server.Locations}}
        location @{{$location.ServiceName}} {
            if ( $degradesvc = "1" ){
                return 404;
            }
            if ( $degradesvc = "0" ){
                set $service "{{$location.ServiceName}}";
        		
        	    # handling custom.nginx.org/canary-add-header
        	    {{if index $.Ingress.Annotations "custom.nginx.org/canary-add-header-svc"}}
                if ( $addsvcheader = "1" ){
        	    {{if index $.Ingress.Annotations "custom.nginx.org/canary-add-header"}}
                {{range $addcanaryheader := split (index $.Ingress.Annotations "custom.nginx.org/        canary-add-header") ","}} 
                    add_header {{trim $addcanaryheader}} always; 
                {{end}}
        	    {{end}} 
                }
                {{end}}
        
        		{{if $location.SSL}}
        		proxy_pass https://{{$location.Upstream.Name}}{{$location.Rewrite}};
        		{{else}}
        		proxy_pass http://{{$location.Upstream.Name}}{{$location.Rewrite}};
        		{{end}}
        
        	}
        }
        {{end}}   
	{{end}} 
	
	# handling IPset Block request
	location /block {
            return 403 "your IP is not allowed！";
        }
	
	# handling custom.nginx.org/canary-by-path
        {{if index $.Ingress.Annotations "custom.nginx.org/canary-by-multicondition"}}
        {{with $canarypath := index $.Ingress.Annotations "custom.nginx.org/canary-by-path"}}
        location {{if $canarypath}}{{$canarypath}}{{end}} {
            rewrite ^ $match_multicondition last;
         }
        {{end}}
	{{end}}
	{{if index $.Ingress.Annotations "custom.nginx.org/canary-by-weight"}}
        {{with $canarypath := index $.Ingress.Annotations "custom.nginx.org/canary-by-path"}}
        location {{if $canarypath}}{{$canarypath}}{{end}} {
            rewrite ^ $match last;
         }
        {{end}}
	{{end}}
}{{end}}
